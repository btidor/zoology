# Autogenerated with `stubgen -m pybitwuzla`
# with some types added by hand

# mypy: disable-error-code="no-untyped-def,type-arg,assignment"
# pyright: reportGeneralTypeIssues=false

import enum
from typing import Any, ClassVar

class Bitwuzla:
    __pyx_vtable__: ClassVar[PyCapsule] = ...  # type: ignore[name-defined]
    def __init__(self, *args, **kwargs) -> None: ...
    def assert_formula(self, *args: BitwuzlaTerm) -> None: ...
    def assume_formula(self, *args: BitwuzlaTerm) -> None: ...
    def check_sat(self) -> Result: ...
    def copyright(self, *args, **kwargs) -> Any: ...
    def dump_formula(self, fmt=...) -> Any: ...
    def fixate_assumptions(self, *args, **kwargs) -> Any: ...
    def get_model(self, fmt=...) -> Any: ...
    def get_option(self, opt) -> Any: ...
    def get_unsat_assumptions(self) -> list[BitwuzlaTerm]: ...
    def get_unsat_core(self, *args, **kwargs) -> Any: ...
    def get_value(self, term: BitwuzlaTerm) -> BitwuzlaTerm: ...
    def get_value_str(self, term: BitwuzlaTerm) -> str: ...
    def git_id(self, *args, **kwargs) -> Any: ...
    def is_unsat_assumption(self, *args, **kwargs) -> Any: ...
    def mk_array_sort(
        self, index: BitwuzlaSort, elem: BitwuzlaSort
    ) -> BitwuzlaSort: ...
    def mk_bool_sort(self, *args, **kwargs) -> Any: ...
    def mk_bv_max_signed(self, sort) -> Any: ...
    def mk_bv_min_signed(self, sort) -> Any: ...
    def mk_bv_ones(self, sort) -> Any: ...
    def mk_bv_sort(self, width: int) -> BitwuzlaSort: ...
    def mk_bv_value(self, sort: BitwuzlaSort, value: int) -> BitwuzlaTerm: ...
    def mk_const(self, sort: BitwuzlaSort, symbol: str) -> BitwuzlaTerm: ...
    def mk_const_array(
        self, sort: BitwuzlaSort, value: BitwuzlaTerm
    ) -> BitwuzlaTerm: ...
    def mk_fp_nan(self, sort) -> Any: ...
    def mk_fp_neg_inf(self, sort) -> Any: ...
    def mk_fp_neg_zero(self, sort) -> Any: ...
    def mk_fp_pos_inf(self, sort) -> Any: ...
    def mk_fp_pos_zero(self, sort) -> Any: ...
    def mk_fp_sort(self, exp_size, sig_size) -> Any: ...
    def mk_fp_value(self, sort, sign, exponent, significand) -> Any: ...
    def mk_fp_value_from(self, sort, rm, value) -> Any: ...
    def mk_fun_sort(self, domain, codomain) -> Any: ...
    def mk_rm_sort(self) -> Any: ...
    def mk_rm_value(self, rm) -> Any: ...
    def mk_term(
        self, kind: Kind, terms: list[BitwuzlaTerm], indices: list[int] | None
    ) -> BitwuzlaTerm: ...
    def mk_var(self, sort, symbol=...) -> Any: ...
    def pop(self, levels=...) -> Any: ...
    def push(self, levels=...) -> Any: ...
    def reset_assumptions(self, *args, **kwargs) -> Any: ...
    def set_option(self, opt, value) -> Any: ...
    def set_term(self, fun, args) -> Any: ...
    def simplify(self, *args, **kwargs) -> Any: ...
    def substitute(self, terms, subst_map) -> Any: ...
    def terminate(self, *args, **kwargs) -> Any: ...
    def version(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BitwuzlaException(Exception):
    def __init__(self, *args, **kwargs) -> None: ...

class BitwuzlaSort:
    __hash__: ClassVar[None] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...  # type: ignore[name-defined]
    def __init__(self, *args, **kwargs) -> None: ...
    def array_get_element(self, *args, **kwargs) -> Any: ...
    def array_get_index(self, *args, **kwargs) -> Any: ...
    def bv_get_size(self, *args, **kwargs) -> Any: ...
    def fp_get_exp_size(self, *args, **kwargs) -> Any: ...
    def fp_get_sig_size(self, *args, **kwargs) -> Any: ...
    def fun_get_arity(self, *args, **kwargs) -> Any: ...
    def fun_get_codomain(self, *args, **kwargs) -> Any: ...
    def fun_get_domain_sorts(self, *args, **kwargs) -> Any: ...
    def is_array(self, *args, **kwargs) -> Any: ...
    def is_bv(self, *args, **kwargs) -> Any: ...
    def is_fp(self, *args, **kwargs) -> Any: ...
    def is_fun(self, *args, **kwargs) -> Any: ...
    def is_rm(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BitwuzlaTerm:
    __pyx_vtable__: ClassVar[PyCapsule] = ...  # type: ignore[name-defined]
    def __init__(self, *args, **kwargs) -> None: ...
    def dump(self, fmt: str = ...) -> str: ...
    def get_children(self, *args, **kwargs) -> Any: ...
    def get_indices(self, *args, **kwargs) -> Any: ...
    def get_kind(self, *args, **kwargs) -> Any: ...
    def get_sort(self, *args, **kwargs) -> Any: ...
    def get_symbol(self, *args, **kwargs) -> Any: ...
    def is_array(self, *args, **kwargs) -> Any: ...
    def is_bound_var(self, *args, **kwargs) -> Any: ...
    def is_bv(self, *args, **kwargs) -> Any: ...
    def is_bv_value(self, *args, **kwargs) -> Any: ...
    def is_bv_value_max_signed(self, *args, **kwargs) -> Any: ...
    def is_bv_value_min_signed(self, *args, **kwargs) -> Any: ...
    def is_bv_value_one(self, *args, **kwargs) -> Any: ...
    def is_bv_value_ones(self, *args, **kwargs) -> Any: ...
    def is_bv_value_zero(self, *args, **kwargs) -> Any: ...
    def is_const(self, *args, **kwargs) -> Any: ...
    def is_const_array(self, *args, **kwargs) -> Any: ...
    def is_fp(self, *args, **kwargs) -> Any: ...
    def is_fp_value(self, *args, **kwargs) -> Any: ...
    def is_fp_value_nan(self, *args, **kwargs) -> Any: ...
    def is_fp_value_neg_inf(self, *args, **kwargs) -> Any: ...
    def is_fp_value_neg_zero(self, *args, **kwargs) -> Any: ...
    def is_fp_value_pos_inf(self, *args, **kwargs) -> Any: ...
    def is_fp_value_pos_zero(self, *args, **kwargs) -> Any: ...
    def is_fun(self, *args, **kwargs) -> Any: ...
    def is_indexed(self, *args, **kwargs) -> Any: ...
    def is_rm(self, *args, **kwargs) -> Any: ...
    def is_rm_value(self, *args, **kwargs) -> Any: ...
    def is_var(self, *args, **kwargs) -> Any: ...
    def set_symbol(self, symbol) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Enum:
    class _member_type_:
        __class__: Any
        def __init__(self, *args, **kwargs) -> None: ...
        def __delattr__(self, name) -> Any: ...
        def __dir__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getstate__(self) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        @classmethod
        def __init_subclass__(cls, *args, **kwargs) -> None: ...
        def __le__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __reduce_ex__(self, protocol) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __sizeof__(self) -> Any: ...
        @classmethod
        def __subclasshook__(cls, *args, **kwargs) -> Any: ...
    __init__: ClassVar[function] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _new_member_: ClassVar[function] = ...
    _unhashable_values_: ClassVar[list] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    _value_repr_: ClassVar[None] = ...
    __dir__: ClassVar[function] = ...
    __format__: ClassVar[function] = ...
    __hash__: ClassVar[function] = ...
    __reduce_ex__: ClassVar[function] = ...
    @classmethod
    def _missing_(cls, *args, **kwargs) -> Any: ...
    @property
    def name(self) -> Any: ...
    @property
    def value(self) -> Any: ...

class Kind(enum.Enum):
    class _member_type_:
        __class__: Any
        def __init__(self, *args, **kwargs) -> None: ...
        def __delattr__(self, name) -> Any: ...
        def __dir__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getstate__(self) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        @classmethod
        def __init_subclass__(cls, *args, **kwargs) -> None: ...
        def __le__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __reduce_ex__(self, protocol) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __sizeof__(self) -> Any: ...
        @classmethod
        def __subclasshook__(cls, *args, **kwargs) -> Any: ...
    __new__: ClassVar[function] = ...
    AND: ClassVar[Kind] = ...
    APPLY: ClassVar[Kind] = ...
    ARRAY_SELECT: ClassVar[Kind] = ...
    ARRAY_STORE: ClassVar[Kind] = ...
    BV_ADD: ClassVar[Kind] = ...
    BV_AND: ClassVar[Kind] = ...
    BV_ASHR: ClassVar[Kind] = ...
    BV_COMP: ClassVar[Kind] = ...
    BV_CONCAT: ClassVar[Kind] = ...
    BV_DEC: ClassVar[Kind] = ...
    BV_EXTRACT: ClassVar[Kind] = ...
    BV_INC: ClassVar[Kind] = ...
    BV_MUL: ClassVar[Kind] = ...
    BV_NAND: ClassVar[Kind] = ...
    BV_NEG: ClassVar[Kind] = ...
    BV_NOR: ClassVar[Kind] = ...
    BV_NOT: ClassVar[Kind] = ...
    BV_OR: ClassVar[Kind] = ...
    BV_REDAND: ClassVar[Kind] = ...
    BV_REDOR: ClassVar[Kind] = ...
    BV_REDXOR: ClassVar[Kind] = ...
    BV_REPEAT: ClassVar[Kind] = ...
    BV_ROL: ClassVar[Kind] = ...
    BV_ROLI: ClassVar[Kind] = ...
    BV_ROR: ClassVar[Kind] = ...
    BV_RORI: ClassVar[Kind] = ...
    BV_SADD_OVERFLOW: ClassVar[Kind] = ...
    BV_SDIV: ClassVar[Kind] = ...
    BV_SDIV_OVERFLOW: ClassVar[Kind] = ...
    BV_SGE: ClassVar[Kind] = ...
    BV_SGT: ClassVar[Kind] = ...
    BV_SHL: ClassVar[Kind] = ...
    BV_SHR: ClassVar[Kind] = ...
    BV_SIGN_EXTEND: ClassVar[Kind] = ...
    BV_SLE: ClassVar[Kind] = ...
    BV_SLT: ClassVar[Kind] = ...
    BV_SMOD: ClassVar[Kind] = ...
    BV_SMUL_OVERFLOW: ClassVar[Kind] = ...
    BV_SREM: ClassVar[Kind] = ...
    BV_SSUB_OVERFLOW: ClassVar[Kind] = ...
    BV_SUB: ClassVar[Kind] = ...
    BV_UADD_OVERFLOW: ClassVar[Kind] = ...
    BV_UDIV: ClassVar[Kind] = ...
    BV_UGE: ClassVar[Kind] = ...
    BV_UGT: ClassVar[Kind] = ...
    BV_ULE: ClassVar[Kind] = ...
    BV_ULT: ClassVar[Kind] = ...
    BV_UMUL_OVERFLOW: ClassVar[Kind] = ...
    BV_UREM: ClassVar[Kind] = ...
    BV_USUB_OVERFLOW: ClassVar[Kind] = ...
    BV_XNOR: ClassVar[Kind] = ...
    BV_XOR: ClassVar[Kind] = ...
    BV_ZERO_EXTEND: ClassVar[Kind] = ...
    CONST: ClassVar[Kind] = ...
    CONST_ARRAY: ClassVar[Kind] = ...
    DISTINCT: ClassVar[Kind] = ...
    EQUAL: ClassVar[Kind] = ...
    EXISTS: ClassVar[Kind] = ...
    FORALL: ClassVar[Kind] = ...
    FP_ABS: ClassVar[Kind] = ...
    FP_ADD: ClassVar[Kind] = ...
    FP_DIV: ClassVar[Kind] = ...
    FP_EQ: ClassVar[Kind] = ...
    FP_FMA: ClassVar[Kind] = ...
    FP_FP: ClassVar[Kind] = ...
    FP_GEQ: ClassVar[Kind] = ...
    FP_GT: ClassVar[Kind] = ...
    FP_IS_INF: ClassVar[Kind] = ...
    FP_IS_NAN: ClassVar[Kind] = ...
    FP_IS_NEG: ClassVar[Kind] = ...
    FP_IS_NORMAL: ClassVar[Kind] = ...
    FP_IS_POS: ClassVar[Kind] = ...
    FP_IS_SUBNORMAL: ClassVar[Kind] = ...
    FP_IS_ZERO: ClassVar[Kind] = ...
    FP_LEQ: ClassVar[Kind] = ...
    FP_LT: ClassVar[Kind] = ...
    FP_MAX: ClassVar[Kind] = ...
    FP_MIN: ClassVar[Kind] = ...
    FP_MUL: ClassVar[Kind] = ...
    FP_NEG: ClassVar[Kind] = ...
    FP_REM: ClassVar[Kind] = ...
    FP_RTI: ClassVar[Kind] = ...
    FP_SQRT: ClassVar[Kind] = ...
    FP_SUB: ClassVar[Kind] = ...
    FP_TO_FP_FROM_BV: ClassVar[Kind] = ...
    FP_TO_FP_FROM_FP: ClassVar[Kind] = ...
    FP_TO_FP_FROM_SBV: ClassVar[Kind] = ...
    FP_TO_FP_FROM_UBV: ClassVar[Kind] = ...
    FP_TO_SBV: ClassVar[Kind] = ...
    FP_TO_UBV: ClassVar[Kind] = ...
    IFF: ClassVar[Kind] = ...
    IMPLIES: ClassVar[Kind] = ...
    ITE: ClassVar[Kind] = ...
    LAMBDA: ClassVar[Kind] = ...
    NOT: ClassVar[Kind] = ...
    OR: ClassVar[Kind] = ...
    VAL: ClassVar[Kind] = ...
    VAR: ClassVar[Kind] = ...
    XOR: ClassVar[Kind] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _unhashable_values_: ClassVar[list] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    _value_repr_: ClassVar[None] = ...
    @classmethod
    def _new_member_(cls, *args, **kwargs) -> Any: ...

class Option(enum.Enum):
    class _member_type_:
        __class__: Any
        def __init__(self, *args, **kwargs) -> None: ...
        def __delattr__(self, name) -> Any: ...
        def __dir__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getstate__(self) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        @classmethod
        def __init_subclass__(cls, *args, **kwargs) -> None: ...
        def __le__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __reduce_ex__(self, protocol) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __sizeof__(self) -> Any: ...
        @classmethod
        def __subclasshook__(cls, *args, **kwargs) -> Any: ...
    __new__: ClassVar[function] = ...
    AIGPROP_NPROPS: ClassVar[Option] = ...
    AIGPROP_USE_BANDIT: ClassVar[Option] = ...
    AIGPROP_USE_RESTARTS: ClassVar[Option] = ...
    CHECK_MODEL: ClassVar[Option] = ...
    CHECK_UNCONSTRAINED: ClassVar[Option] = ...
    CHECK_UNSAT_ASSUMPTIONS: ClassVar[Option] = ...
    DECLSORT_BV_WIDTH: ClassVar[Option] = ...
    ENGINE: ClassVar[Option] = ...
    EXIT_CODES: ClassVar[Option] = ...
    FUN_DUAL_PROP: ClassVar[Option] = ...
    FUN_DUAL_PROP_QSORT: ClassVar[Option] = ...
    FUN_EAGER_LEMMAS: ClassVar[Option] = ...
    FUN_JUST: ClassVar[Option] = ...
    FUN_JUST_HEURISTIC: ClassVar[Option] = ...
    FUN_LAZY_SYNTHESIZE: ClassVar[Option] = ...
    FUN_PREPROP: ClassVar[Option] = ...
    FUN_PRESLS: ClassVar[Option] = ...
    FUN_STORE_LAMBDAS: ClassVar[Option] = ...
    INCREMENTAL: ClassVar[Option] = ...
    INPUT_FORMAT: ClassVar[Option] = ...
    LOGLEVEL: ClassVar[Option] = ...
    LS_SHARE_SAT: ClassVar[Option] = ...
    OUTPUT_FORMAT: ClassVar[Option] = ...
    OUTPUT_NUMBER_FORMAT: ClassVar[Option] = ...
    PARSE_INTERACTIVE: ClassVar[Option] = ...
    PP_ACKERMANN: ClassVar[Option] = ...
    PP_BETA_REDUCE: ClassVar[Option] = ...
    PP_ELIMINATE_EXTRACTS: ClassVar[Option] = ...
    PP_ELIMINATE_ITES: ClassVar[Option] = ...
    PP_EXTRACT_LAMBDAS: ClassVar[Option] = ...
    PP_MERGE_LAMBDAS: ClassVar[Option] = ...
    PP_NONDESTR_SUBST: ClassVar[Option] = ...
    PP_NORMALIZE_ADD: ClassVar[Option] = ...
    PP_SKELETON_PREPROC: ClassVar[Option] = ...
    PP_UNCONSTRAINED_OPTIMIZATION: ClassVar[Option] = ...
    PP_VAR_SUBST: ClassVar[Option] = ...
    PRETTY_PRINT: ClassVar[Option] = ...
    PRINT_DIMACS: ClassVar[Option] = ...
    PRODUCE_MODELS: ClassVar[Option] = ...
    PRODUCE_UNSAT_CORES: ClassVar[Option] = ...
    PROP_ASHR: ClassVar[Option] = ...
    PROP_CONST_BITS: ClassVar[Option] = ...
    PROP_CONST_DOMAINS: ClassVar[Option] = ...
    PROP_ENTAILED: ClassVar[Option] = ...
    PROP_FLIP_COND_CONST_DELTA: ClassVar[Option] = ...
    PROP_FLIP_COND_CONST_NPATHSEL: ClassVar[Option] = ...
    PROP_INFER_INEQ_BOUNDS: ClassVar[Option] = ...
    PROP_NO_MOVE_ON_CONFLICT: ClassVar[Option] = ...
    PROP_NPROPS: ClassVar[Option] = ...
    PROP_NUPDATES: ClassVar[Option] = ...
    PROP_PATH_SEL: ClassVar[Option] = ...
    PROP_PROB_AND_FLIP: ClassVar[Option] = ...
    PROP_PROB_EQ_FLIP: ClassVar[Option] = ...
    PROP_PROB_FALLBACK_RANDOM_VALUE: ClassVar[Option] = ...
    PROP_PROB_FLIP_COND: ClassVar[Option] = ...
    PROP_PROB_FLIP_COND_CONST: ClassVar[Option] = ...
    PROP_PROB_RANDOM_INPUT: ClassVar[Option] = ...
    PROP_PROB_SLICE_FLIP: ClassVar[Option] = ...
    PROP_PROB_SLICE_KEEP_DC: ClassVar[Option] = ...
    PROP_PROB_USE_INV_VALUE: ClassVar[Option] = ...
    PROP_SEXT: ClassVar[Option] = ...
    PROP_SKIP_NO_PROGRESS: ClassVar[Option] = ...
    PROP_USE_BANDIT: ClassVar[Option] = ...
    PROP_USE_INV_LT_CONCAT: ClassVar[Option] = ...
    PROP_USE_RESTARTS: ClassVar[Option] = ...
    PROP_XOR: ClassVar[Option] = ...
    QUANT_EAGER_SKOLEM: ClassVar[Option] = ...
    QUANT_MBQI: ClassVar[Option] = ...
    QUANT_MODE: ClassVar[Option] = ...
    QUANT_SKOLEM_UF: ClassVar[Option] = ...
    QUANT_SYNTH_QI: ClassVar[Option] = ...
    QUANT_SYNTH_SK: ClassVar[Option] = ...
    RW_EXTRACT_ARITH: ClassVar[Option] = ...
    RW_LEVEL: ClassVar[Option] = ...
    RW_NORMALIZE: ClassVar[Option] = ...
    RW_NORMALIZE_ADD: ClassVar[Option] = ...
    RW_SIMPLIFY_CONSTRAINTS: ClassVar[Option] = ...
    RW_SLT: ClassVar[Option] = ...
    RW_SORT_AIG: ClassVar[Option] = ...
    RW_SORT_AIGVEC: ClassVar[Option] = ...
    RW_SORT_EXP: ClassVar[Option] = ...
    SAT_ENGINE: ClassVar[Option] = ...
    SAT_ENGINE_CADICAL_FREEZE: ClassVar[Option] = ...
    SAT_ENGINE_LGL_FORK: ClassVar[Option] = ...
    SAT_ENGINE_N_THREADS: ClassVar[Option] = ...
    SEED: ClassVar[Option] = ...
    SLS_JUST: ClassVar[Option] = ...
    SLS_MOVE_GW: ClassVar[Option] = ...
    SLS_MOVE_INC_MOVE_TEST: ClassVar[Option] = ...
    SLS_MOVE_PROP: ClassVar[Option] = ...
    SLS_MOVE_PROP_FORCE_RW: ClassVar[Option] = ...
    SLS_MOVE_PROP_NPROPS: ClassVar[Option] = ...
    SLS_MOVE_PROP_NSLSS: ClassVar[Option] = ...
    SLS_MOVE_RAND_ALL: ClassVar[Option] = ...
    SLS_MOVE_RAND_RANGE: ClassVar[Option] = ...
    SLS_MOVE_RAND_WALK: ClassVar[Option] = ...
    SLS_MOVE_RANGE: ClassVar[Option] = ...
    SLS_MOVE_SEGMENT: ClassVar[Option] = ...
    SLS_NFLIPS: ClassVar[Option] = ...
    SLS_PROB_MOVE_RAND_WALK: ClassVar[Option] = ...
    SLS_STRATEGY: ClassVar[Option] = ...
    SLS_USE_BANDIT: ClassVar[Option] = ...
    SLS_USE_RESTARTS: ClassVar[Option] = ...
    SMT_COMP_MODE: ClassVar[Option] = ...
    VERBOSITY: ClassVar[Option] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _unhashable_values_: ClassVar[list] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    _value_repr_: ClassVar[None] = ...
    @classmethod
    def _new_member_(cls, *args, **kwargs) -> Any: ...

class Result(enum.Enum):
    class _member_type_:
        __class__: Any
        def __init__(self, *args, **kwargs) -> None: ...
        def __delattr__(self, name) -> Any: ...
        def __dir__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getstate__(self) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        @classmethod
        def __init_subclass__(cls, *args, **kwargs) -> None: ...
        def __le__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __reduce_ex__(self, protocol) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __sizeof__(self) -> Any: ...
        @classmethod
        def __subclasshook__(cls, *args, **kwargs) -> Any: ...
    __new__: ClassVar[function] = ...
    SAT: ClassVar[Result] = ...
    UNKNOWN: ClassVar[Result] = ...
    UNSAT: ClassVar[Result] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _unhashable_values_: ClassVar[list] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    _value_repr_: ClassVar[None] = ...
    @classmethod
    def _new_member_(cls, *args, **kwargs) -> Any: ...

class RoundingMode(enum.Enum):
    class _member_type_:
        __class__: Any
        def __init__(self, *args, **kwargs) -> None: ...
        def __delattr__(self, name) -> Any: ...
        def __dir__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getstate__(self) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        @classmethod
        def __init_subclass__(cls, *args, **kwargs) -> None: ...
        def __le__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __reduce_ex__(self, protocol) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __sizeof__(self) -> Any: ...
        @classmethod
        def __subclasshook__(cls, *args, **kwargs) -> Any: ...
    __new__: ClassVar[function] = ...
    RNA: ClassVar[RoundingMode] = ...
    RNE: ClassVar[RoundingMode] = ...
    RTN: ClassVar[RoundingMode] = ...
    RTP: ClassVar[RoundingMode] = ...
    RTZ: ClassVar[RoundingMode] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _unhashable_values_: ClassVar[list] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    _value_repr_: ClassVar[None] = ...
    @classmethod
    def _new_member_(cls, *args, **kwargs) -> Any: ...

class defaultdict(dict):
    default_factory: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def copy(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __class_getitem__(cls, *args, **kwargs) -> Any: ...
    def __copy__(self) -> Any: ...
    def __missing__(self, key) -> Any: ...
    def __or__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __ror__(self, other) -> Any: ...
