# Autogenerated with `stubgen -m pybitwuzla`
# with some types added by hand

from enum import Enum
from typing import Any, Callable, ClassVar

class Bitwuzla:
    def __init__(self) -> None: ...
    def assert_formula(self, *args: BitwuzlaTerm) -> None: ...
    def assume_formula(self, *args: BitwuzlaTerm) -> None: ...
    def check_sat(self) -> Result: ...
    def copyright(self) -> str: ...
    def dump_formula(self, fmt: str = "smt2") -> str: ...
    def fixate_assumptions(self) -> None: ...
    def get_model(self, fmt: str = "smt2") -> str: ...
    def get_option(self, opt: Option) -> str | int | bool: ...
    def get_unsat_assumptions(self) -> list[BitwuzlaTerm]: ...
    def get_unsat_core(self) -> list[BitwuzlaTerm]: ...
    def get_value(self, term: BitwuzlaTerm) -> BitwuzlaTerm: ...
    def get_value_str(self, term: BitwuzlaTerm) -> str: ...
    def git_id(self) -> str: ...
    def is_unsat_assumption(self, *assumptions: BitwuzlaTerm) -> list[bool]: ...
    def mk_array_sort(
        self, index: BitwuzlaSort, elem: BitwuzlaSort
    ) -> BitwuzlaSort: ...
    def mk_bool_sort(self) -> BitwuzlaSort: ...
    def mk_bv_max_signed(self, sort: BitwuzlaSort) -> BitwuzlaTerm: ...
    def mk_bv_min_signed(self, sort: BitwuzlaSort) -> BitwuzlaTerm: ...
    def mk_bv_ones(self, sort: BitwuzlaSort) -> BitwuzlaTerm: ...
    def mk_bv_sort(self, width: int) -> BitwuzlaSort: ...
    def mk_bv_value(self, sort: BitwuzlaSort, value: int | str) -> BitwuzlaTerm: ...
    def mk_const(self, sort: BitwuzlaSort, symbol: str) -> BitwuzlaTerm: ...
    def mk_const_array(
        self, sort: BitwuzlaSort, value: BitwuzlaTerm
    ) -> BitwuzlaTerm: ...
    def mk_fp_nan(self, sort: BitwuzlaSort) -> BitwuzlaTerm: ...
    def mk_fp_neg_inf(self, sort: BitwuzlaSort) -> BitwuzlaTerm: ...
    def mk_fp_neg_zero(self, sort: BitwuzlaSort) -> BitwuzlaTerm: ...
    def mk_fp_pos_inf(self, sort: BitwuzlaSort) -> BitwuzlaTerm: ...
    def mk_fp_pos_zero(self, sort: BitwuzlaSort) -> BitwuzlaTerm: ...
    def mk_fp_sort(self, exp_size: int | str, sig_size: int | str) -> BitwuzlaSort: ...
    def mk_fp_value(
        self,
        sort: BitwuzlaSort,
        sign: int | str,
        exponent: int | str,
        significand: int | str,
    ) -> BitwuzlaTerm: ...
    def mk_fp_value_from(
        self, sort: BitwuzlaSort, rm: BitwuzlaTerm, value: str
    ) -> BitwuzlaTerm: ...
    def mk_fun_sort(
        self, domain: list[BitwuzlaSort], codomain: BitwuzlaSort
    ) -> BitwuzlaSort: ...
    def mk_rm_sort(self) -> BitwuzlaSort: ...
    def mk_rm_value(self, rm: RoundingMode) -> BitwuzlaTerm: ...
    def mk_term(
        self, kind: Kind, terms: list[BitwuzlaTerm], indices: list[int] | None
    ) -> BitwuzlaTerm: ...
    def mk_var(self, sort: BitwuzlaSort, symbol: str | None = None) -> BitwuzlaTerm: ...
    def pop(self, levels: int = 1) -> None: ...
    def push(self, levels: int = 1) -> None: ...
    def reset_assumptions(self) -> None: ...
    def set_option(self, opt: Option, value: bool | str) -> None: ...
    def set_term(self, fun: Callable[..., bool], args: list[Any]) -> None: ...
    def simplify(self) -> Result: ...
    def substitute(
        self,
        terms: BitwuzlaTerm | list[BitwuzlaTerm],
        subst_map: dict[BitwuzlaTerm, BitwuzlaTerm],
    ) -> BitwuzlaTerm | list[BitwuzlaTerm]: ...
    def terminate(self) -> bool: ...
    def version(self) -> str: ...

class BitwuzlaException(Exception):
    def __init__(self, msg: str) -> None: ...

class BitwuzlaSort:
    __hash__: ClassVar[None] = ...
    def array_get_element(self) -> BitwuzlaSort: ...
    def array_get_index(self) -> BitwuzlaSort: ...
    def bv_get_size(self) -> int: ...
    def fp_get_exp_size(self) -> int: ...
    def fp_get_sig_size(self) -> int: ...
    def fun_get_arity(self) -> int: ...
    def fun_get_codomain(self) -> BitwuzlaSort: ...
    def fun_get_domain_sorts(self) -> list[BitwuzlaSort]: ...
    def is_array(self) -> bool: ...
    def is_bv(self) -> bool: ...
    def is_fp(self) -> bool: ...
    def is_fun(self) -> bool: ...
    def is_rm(self) -> bool: ...

class BitwuzlaTerm:
    def dump(self, fmt: str = ...) -> str: ...
    def get_children(self) -> list[BitwuzlaTerm]: ...
    def get_indices(self) -> list[int]: ...
    def get_kind(self) -> Kind: ...
    def get_sort(self) -> BitwuzlaSort: ...
    def get_symbol(self) -> str: ...
    def is_array(self) -> bool: ...
    def is_bound_var(self) -> bool: ...
    def is_bv(self) -> bool: ...
    def is_bv_value(self) -> bool: ...
    def is_bv_value_max_signed(self) -> bool: ...
    def is_bv_value_min_signed(self) -> bool: ...
    def is_bv_value_one(self) -> bool: ...
    def is_bv_value_ones(self) -> bool: ...
    def is_bv_value_zero(self) -> bool: ...
    def is_const(self) -> bool: ...
    def is_const_array(self) -> bool: ...
    def is_fp(self) -> bool: ...
    def is_fp_value(self) -> bool: ...
    def is_fp_value_nan(self) -> bool: ...
    def is_fp_value_neg_inf(self) -> bool: ...
    def is_fp_value_neg_zero(self) -> bool: ...
    def is_fp_value_pos_inf(self) -> bool: ...
    def is_fp_value_pos_zero(self) -> bool: ...
    def is_fun(self) -> bool: ...
    def is_indexed(self) -> bool: ...
    def is_rm(self) -> bool: ...
    def is_rm_value(self) -> bool: ...
    def is_var(self) -> bool: ...
    def set_symbol(self, symbol: str) -> None: ...

class Kind(Enum):
    AND = ...
    APPLY = ...
    ARRAY_SELECT = ...
    ARRAY_STORE = ...
    BV_ADD = ...
    BV_AND = ...
    BV_ASHR = ...
    BV_COMP = ...
    BV_CONCAT = ...
    BV_DEC = ...
    BV_EXTRACT = ...
    BV_INC = ...
    BV_MUL = ...
    BV_NAND = ...
    BV_NEG = ...
    BV_NOR = ...
    BV_NOT = ...
    BV_OR = ...
    BV_REDAND = ...
    BV_REDOR = ...
    BV_REDXOR = ...
    BV_REPEAT = ...
    BV_ROL = ...
    BV_ROLI = ...
    BV_ROR = ...
    BV_RORI = ...
    BV_SADD_OVERFLOW = ...
    BV_SDIV = ...
    BV_SDIV_OVERFLOW = ...
    BV_SGE = ...
    BV_SGT = ...
    BV_SHL = ...
    BV_SHR = ...
    BV_SIGN_EXTEND = ...
    BV_SLE = ...
    BV_SLT = ...
    BV_SMOD = ...
    BV_SMUL_OVERFLOW = ...
    BV_SREM = ...
    BV_SSUB_OVERFLOW = ...
    BV_SUB = ...
    BV_UADD_OVERFLOW = ...
    BV_UDIV = ...
    BV_UGE = ...
    BV_UGT = ...
    BV_ULE = ...
    BV_ULT = ...
    BV_UMUL_OVERFLOW = ...
    BV_UREM = ...
    BV_USUB_OVERFLOW = ...
    BV_XNOR = ...
    BV_XOR = ...
    BV_ZERO_EXTEND = ...
    CONST = ...
    CONST_ARRAY = ...
    DISTINCT = ...
    EQUAL = ...
    EXISTS = ...
    FORALL = ...
    FP_ABS = ...
    FP_ADD = ...
    FP_DIV = ...
    FP_EQ = ...
    FP_FMA = ...
    FP_FP = ...
    FP_GEQ = ...
    FP_GT = ...
    FP_IS_INF = ...
    FP_IS_NAN = ...
    FP_IS_NEG = ...
    FP_IS_NORMAL = ...
    FP_IS_POS = ...
    FP_IS_SUBNORMAL = ...
    FP_IS_ZERO = ...
    FP_LEQ = ...
    FP_LT = ...
    FP_MAX = ...
    FP_MIN = ...
    FP_MUL = ...
    FP_NEG = ...
    FP_REM = ...
    FP_RTI = ...
    FP_SQRT = ...
    FP_SUB = ...
    FP_TO_FP_FROM_BV = ...
    FP_TO_FP_FROM_FP = ...
    FP_TO_FP_FROM_SBV = ...
    FP_TO_FP_FROM_UBV = ...
    FP_TO_SBV = ...
    FP_TO_UBV = ...
    IFF = ...
    IMPLIES = ...
    ITE = ...
    LAMBDA = ...
    NOT = ...
    OR = ...
    VAL = ...
    VAR = ...
    XOR = ...

class Option(Enum):
    AIGPROP_NPROPS = ...
    AIGPROP_USE_BANDIT = ...
    AIGPROP_USE_RESTARTS = ...
    CHECK_MODEL = ...
    CHECK_UNCONSTRAINED = ...
    CHECK_UNSAT_ASSUMPTIONS = ...
    DECLSORT_BV_WIDTH = ...
    ENGINE = ...
    EXIT_CODES = ...
    FUN_DUAL_PROP = ...
    FUN_DUAL_PROP_QSORT = ...
    FUN_EAGER_LEMMAS = ...
    FUN_JUST = ...
    FUN_JUST_HEURISTIC = ...
    FUN_LAZY_SYNTHESIZE = ...
    FUN_PREPROP = ...
    FUN_PRESLS = ...
    FUN_STORE_LAMBDAS = ...
    INCREMENTAL = ...
    INPUT_FORMAT = ...
    LOGLEVEL = ...
    LS_SHARE_SAT = ...
    OUTPUT_FORMAT = ...
    OUTPUT_NUMBER_FORMAT = ...
    PARSE_INTERACTIVE = ...
    PP_ACKERMANN = ...
    PP_BETA_REDUCE = ...
    PP_ELIMINATE_EXTRACTS = ...
    PP_ELIMINATE_ITES = ...
    PP_EXTRACT_LAMBDAS = ...
    PP_MERGE_LAMBDAS = ...
    PP_NONDESTR_SUBST = ...
    PP_NORMALIZE_ADD = ...
    PP_SKELETON_PREPROC = ...
    PP_UNCONSTRAINED_OPTIMIZATION = ...
    PP_VAR_SUBST = ...
    PRETTY_PRINT = ...
    PRINT_DIMACS = ...
    PRODUCE_MODELS = ...
    PRODUCE_UNSAT_CORES = ...
    PROP_ASHR = ...
    PROP_CONST_BITS = ...
    PROP_CONST_DOMAINS = ...
    PROP_ENTAILED = ...
    PROP_FLIP_COND_CONST_DELTA = ...
    PROP_FLIP_COND_CONST_NPATHSEL = ...
    PROP_INFER_INEQ_BOUNDS = ...
    PROP_NO_MOVE_ON_CONFLICT = ...
    PROP_NPROPS = ...
    PROP_NUPDATES = ...
    PROP_PATH_SEL = ...
    PROP_PROB_AND_FLIP = ...
    PROP_PROB_EQ_FLIP = ...
    PROP_PROB_FALLBACK_RANDOM_VALUE = ...
    PROP_PROB_FLIP_COND = ...
    PROP_PROB_FLIP_COND_CONST = ...
    PROP_PROB_RANDOM_INPUT = ...
    PROP_PROB_SLICE_FLIP = ...
    PROP_PROB_SLICE_KEEP_DC = ...
    PROP_PROB_USE_INV_VALUE = ...
    PROP_SEXT = ...
    PROP_SKIP_NO_PROGRESS = ...
    PROP_USE_BANDIT = ...
    PROP_USE_INV_LT_CONCAT = ...
    PROP_USE_RESTARTS = ...
    PROP_XOR = ...
    QUANT_EAGER_SKOLEM = ...
    QUANT_MBQI = ...
    QUANT_MODE = ...
    QUANT_SKOLEM_UF = ...
    QUANT_SYNTH_QI = ...
    QUANT_SYNTH_SK = ...
    RW_EXTRACT_ARITH = ...
    RW_LEVEL = ...
    RW_NORMALIZE = ...
    RW_NORMALIZE_ADD = ...
    RW_SIMPLIFY_CONSTRAINTS = ...
    RW_SLT = ...
    RW_SORT_AIG = ...
    RW_SORT_AIGVEC = ...
    RW_SORT_EXP = ...
    SAT_ENGINE = ...
    SAT_ENGINE_CADICAL_FREEZE = ...
    SAT_ENGINE_LGL_FORK = ...
    SAT_ENGINE_N_THREADS = ...
    SEED = ...
    SLS_JUST = ...
    SLS_MOVE_GW = ...
    SLS_MOVE_INC_MOVE_TEST = ...
    SLS_MOVE_PROP = ...
    SLS_MOVE_PROP_FORCE_RW = ...
    SLS_MOVE_PROP_NPROPS = ...
    SLS_MOVE_PROP_NSLSS = ...
    SLS_MOVE_RAND_ALL = ...
    SLS_MOVE_RAND_RANGE = ...
    SLS_MOVE_RAND_WALK = ...
    SLS_MOVE_RANGE = ...
    SLS_MOVE_SEGMENT = ...
    SLS_NFLIPS = ...
    SLS_PROB_MOVE_RAND_WALK = ...
    SLS_STRATEGY = ...
    SLS_USE_BANDIT = ...
    SLS_USE_RESTARTS = ...
    SMT_COMP_MODE = ...
    VERBOSITY = ...

class Result(Enum):
    SAT = ...
    UNKNOWN = ...
    UNSAT = ...

class RoundingMode(Enum):
    RNA = ...
    RNE = ...
    RTN = ...
    RTP = ...
    RTZ = ...
