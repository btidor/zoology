from opcodes import *


def test_ADD() -> None:
    assert ADD(10, 10) == 20
    assert (
        ADD(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 1) == 0
    )


def test_MUL() -> None:
    assert MUL(10, 10) == 100
    assert (
        MUL(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 2)
        == 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
    )


def test_SUB() -> None:
    assert SUB(10, 10) == 0
    assert (
        SUB(0, 1) == 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    )


def test_DIV() -> None:
    assert DIV(10, 10) == 1
    assert DIV(1, 2) == 0
    assert DIV(10, 0) == 0


def test_SDIV() -> None:
    assert SDIV(10, 10) == 1
    assert (
        SDIV(
            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE,
            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,
        )
        == 2
    )
    assert SDIV(10, 0) == 0


def test_MOD() -> None:
    assert MOD(10, 3) == 1
    assert MOD(17, 5) == 2
    assert MOD(10, 0) == 0


def test_SMOD() -> None:
    assert SMOD(10, 3) == 1
    assert (
        SMOD(
            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8,
            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD,
        )
        == 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
    )
    assert SMOD(10, 0) == 0


def test_ADDMOD() -> None:
    assert ADDMOD(10, 10, 8) == 4
    assert (
        ADDMOD(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 2, 2)
        == 1
    )


def test_MULMOD() -> None:
    assert MULMOD(10, 10, 8) == 4
    assert (
        MULMOD(
            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,
            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,
            12,
        )
        == 9
    )


def test_EXP() -> None:
    assert EXP(10, 2) == 100
    assert EXP(2, 2) == 4


def test_SIGNEXTEND() -> None:
    assert (
        SIGNEXTEND(0, 0xFF)
        == 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    )
    assert (
        SIGNEXTEND(0, 0xAA)
        == 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
    )
    assert SIGNEXTEND(0, 0x7F) == 0x7F
